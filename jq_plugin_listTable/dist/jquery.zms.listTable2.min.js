/**
 * Created by coco king on 2016-09-22.
 * zms_listTable审批进度展示插件
 * 依赖jquery,artTemplate,layui
 */

//https://github.com/jquery-boilerplate

// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;( function( $, window, document,template,layer ,undefined ) {

    "use strict";

    // undefined is used here as the undefined global variable in ECMAScript 3 is
    // mutable (ie. it can be changed by someone else). undefined isn't really being
    // passed in so we can ensure the value of it is truly undefined. In ES5, undefined
    // can no longer be modified.

    // window and document are passed through as local variables rather than global
    // as this (slightly) quickens the resolution process and can be more efficiently
    // minified (especially when both are regularly referenced in your plugin).

    // Create the defaults once
    var pluginName = "zms_listTable",
        defaults = {
            svgframe:'temp_zms_listTable_svgframe_default',
            bgcolor:'white',
            color:'gray',
            fontsize:'12',
            font:'Helvetica, Arial, sans-serif',
            overflow:'visible',
            icons:['min','full','plus'],
            size:{width:'600',height:'600',maxHeight:'600px',arrowHeight:76,raw:5},
            stateArray:[
                {
                    state:0,
                    name:'审批中',
                    color1:'black',
                    bgcolor1:'white',
                    color2:'white',
                    bgcolor2:'#23b7e5',
                    arrowcolor:'#23b7e5'
                },
                {
                    state:1,
                    name:'通过',
                    color1:'black',
                    bgcolor1:'white',
                    color2:'white',
                    bgcolor2:'#2de83b',
                    arrowcolor:'#2de83b'
                },
                {
                    state:2,
                    name:'驳回',
                    color1:'black',
                    bgcolor1:'white',
                    color2:'white',
                    bgcolor2:'#8312d8',
                    arrowcolor:'#8312d8'
                },
                {
                    state:3,
                    name:'终止',
                    color1:'black',
                    bgcolor1:'white',
                    color2:'white',
                    bgcolor2:'#fb6e52',
                    arrowcolor:'#fb6e52'
                }
            ],
            data: {
                title: '审批表单名称',
                state: 1,
                username:'申请人姓名',
                createTime:new Date(),
                list: [
                    {
                        id:0,
                        title: '节点1',
                        state: 1,
                        appUserName:'刘侃',
                        oprate:'审批',
                        popTitle: 'ddff详情',
                        popContent: '没有内容'
                    },
                    {
                        id:1,
                        title: '节点2',
                        state: 0,
                        appUserName:'李欢',
                        oprate:'审批',
                        popTitle: '详情',
                        popContent: '没sdfsdf有内容'
                    },
                    {
                        id:2,
                        title: '节点3',
                        state: 0,
                        appUserName:'李欢',
                        oprate:'审批',
                        popTitle: '详情',
                        popContent: '没有内容'
                    }
                ]
            },
            renderMap:{
                property:'list',
                title:'title',
                state:'state',
                popTitle:'popTitle',
                popContent:'popContent'
            },
            nodeHover:function(obj){
                return layer.open({
                    type:1,
                    shade: 0,
                    area: ['500px', '300px'],
                    title:$(obj).data('title'),
                    content:$(obj).data('content')
                });
            },
            other:null
        },
        defaultTemplateHtml='<script type="text/template" id="temp_zms_listTable_svgframe_default"><h3 style="text-align: center;vertical-align: middle;padding: 10px 0" width="{{size.width}}" height="50px">{{data.title}}</h3> <svg width="{{size.width}}" height="{{size.height}}" xmlns="http://www.w3.org/2000/svg" style="max-height:{{size.maxHeight}};overflow:{{overflow}}"> <defs>{{each stateArray}} <marker id="arrow_{{$value.state}}" markerUnits="strokeWidth" markerWidth="12" markerHeight="12" viewBox="0 0 12 12" refX="6" refY="6" orient="auto"> <path d="M2,2 L10,6 L2,10 L6,6 L2,2" style="fill:{{$value.arrowcolor}};" /> </marker>{{/each}} </defs> <g> <rect fill="{{bgcolor}}" id="canvas_background" height="402" width="582" y="-1" x="-1"/> <g display="none" overflow="visible" y="0" x="0" height="100%" width="100%" id="canvasGrid"> <rect fill="url(#gridpattern)" stroke-width="0" y="0" x="0" height="100%" width="100%"/> </g> </g>{{each data.list}} <g class="zms_listTable node" data-title="{{$value.popTitle}}" data-content="{{$value.popContent}}"> <rect stroke="{{stateArray[$value.state].bgcolor2}}" id="svg_1_{{$value.id}}" height="{{size.arrowHeight}}" width="{{size.arrowHeight*size.raw}}" y="{{size.arrowHeight*(3*$index+1)}}"x="{{(size.width-size.arrowHeight*size.raw)/2}}" stroke-width="0.5" fill="{{stateArray[$value.state].bgcolor1}}"> </rect> <rect stroke="{{stateArray[$value.state].bgcolor2}}" id="svg_2_{{$value.id}}" height="{{size.arrowHeight}}" width="{{size.arrowHeight*size.raw}}"y="{{size.arrowHeight*(3*$index+2)}}" x="{{(size.width-size.arrowHeight*size.raw)/2}}" fill-opacity="null" stroke-opacity="null" stroke-width="0.5"fill="{{stateArray[$value.state].bgcolor2}}"/> <text xml:space="preserve" style="cursor: default" text-anchor="middle" font-family="{{font}}" font-size="{{fontsize}}" id="svg_5_{{$value.id}}" x="50%" y="{{size.arrowHeight*(3*$index+1.6)}}" fill-opacity="null" stroke-opacity="null" stroke-width="0" stroke="{{stateArray[$value.state].color1}}" fill="{{stateArray[$value.state].color1}}">{{$value.title}}</text> <text xml:space="preserve" style="cursor: default" text-anchor="middle" font-family="{{font}}" font-size="{{fontsize}}" id="svg_6_{{$value.id}}" x="50%" y="{{size.arrowHeight*(3*$index+2.6)}}" fill-opacity="null" stroke-opacity="null" stroke-width="0"  stroke="{{stateArray[$value.state].color2}}" fill="{{stateArray[$value.state].color2}}">{{$value.oprate}}-{{stateArray[$value.state].name}}:{{$value.appUserName}}</text> </g> <line x1="{{size.width/2}}" y1="{{size.arrowHeight*(3*$index+3)}}" x2="{{size.width/2}}" y2="{{size.arrowHeight*(3*$index+4)-5}}"  stroke="{{stateArray[$value.state].arrowcolor}}" stroke-width="2" marker-end="url(#arrow_{{$value.state}})"/>{{/each}} <g> <rect stroke="{{stateArray[data.state].bgcolor2}}" id="svg_end" height="{{size.arrowHeight}}" width="{{size.arrowHeight*size.raw}}" y="{{size.arrowHeight*(3*data.list.length+1)}}"x="{{(size.width-size.arrowHeight*size.raw)/2}}" stroke-width="0.5" fill="{{stateArray[data.state].bgcolor2}}"> </rect> <text xml:space="preserve" style="cursor: default" text-anchor="middle" font-family="{{font}}" font-size="{{fontsize}}" id="svg_end_text" x="50%" y="{{size.arrowHeight*(3*data.list.length+1.6)}}" fill-opacity="null" stroke-opacity="null" stroke-width="0"  stroke="{{stateArray[data.state].color2}}" fill="{{stateArray[data.state].color2}}">{{stateArray[data.state].name}}</text></g></svg></script>';

    // The actual plugin constructor
    function Plugin ( element, options ) {
        this.element = element;

        // jQuery has an extend method which merges the contents of two or
        // more objects, storing the result in the first object. The first object
        // is generally empty as we don't want to alter the default options for
        // future instances of the plugin
        this.options = $.extend( {}, defaults, options );
        this._defaults = defaults;
        this._defaultTemplateHtml=defaultTemplateHtml;
        this._name = pluginName;
        this.init(this);
    }

    // Avoid Plugin.prototype conflicts
    $.extend( Plugin.prototype, {
        init: function(obj) {
            var $this =$(obj.element);
            // Place initialization logic here
            // You already have access to the DOM element and
            // the options via the instance, e.g. this.element
            // and this.settings
            // you can add more functions like the one below and
            // call them like the example below
            try {
                $this.css('background-color', obj.options.bgcolor).css('width', obj.options.size.width).css('height', obj.options.size.height);
                if (obj.options.svgframe == 'temp_zms_listTable_svgframe_default' && $('#temp_zms_listTable_svgframe_default') == 'undefined')
                    $('body').appendTo(obj.options._defaultTemplateHtml);
                var htmlFrame = template(obj.options.svgframe, obj.options);
                $this.html(htmlFrame);
            }catch (e){layer.msg(e.message);$.error(e.message);}
            $this.layerid=null;
            $('.zms_listTable.node').hover(function(){
                try {
                    if (obj.options.nodeHover)$this.layerid = obj.options.nodeHover(this);
                }catch (e){layer.msg(e.message);$.error(e.message);}
            },function(){
                layer.close($this.layerid);
            });
        }
    } );

    // A really lightweight plugin wrapper around the constructor,
    // preventing against multiple instantiations
    $.fn[ pluginName ] = function( options ) {
        return this.each( function() {
            if ( !$.data( this, "plugin_" + pluginName ) ) {
                $.data( this, "plugin_" +
                    pluginName, new Plugin( this, options ) );
            }
        } );
    };

} )( jQuery, window, document,template,layer );
